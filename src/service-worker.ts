import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { BackgroundSyncPlugin } from 'workbox-background-sync';

declare let self: ServiceWorkerGlobalScope;

// Cleanup old caches
cleanupOutdatedCaches();

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Create a background sync queue for rides
const ridesSyncQueue = new BackgroundSyncPlugin('rides-sync-queue', {
  maxRetentionTime: 24 * 60 // Retry for up to 24 hours
});

// Cache the OpenStreetMap tiles using CacheFirst strategy
registerRoute(
  ({ url }) => url.href.includes('tile.openstreetmap.org'),
  new CacheFirst({
    cacheName: 'map-tiles-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 500, // Maximum number of tiles to cache
        maxAgeSeconds: 30 * 24 * 60 * 60 // 30 Days
      })
    ]
  })
);

// Cache the application shell
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'app-shell',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 24 * 60 * 60 // 24 hours
      })
    ]
  })
);

// Cache static assets
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'image',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60 // 30 Days
      })
    ]
  })
);

// Handle API requests with NetworkFirst strategy and background sync
registerRoute(
  ({ url }) => url.href.includes('supabase'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [ridesSyncQueue]
  })
);

// Listen for sync events
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-rides') {
    event.waitUntil(syncRides());
  }
});

async function syncRides() {
  try {
    const cache = await caches.open('offline-rides');
    const requests = await cache.keys();

    for (const request of requests) {
      const response = await cache.match(request);
      if (response) {
        const ride = await response.json();

        // Attempt to sync with server
        const res = await fetch(request, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(ride)
        });

        if (res.ok) {
          await cache.delete(request);
        }
      }
    }
  } catch (error) {
    console.error('Sync failed:', error);
  }
}

// Handle offline fallback
self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match('/offline.html');
      })
    );
  }
});